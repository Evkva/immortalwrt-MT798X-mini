name: "MT798X固件炼丹炉：cpe"

on:
  workflow_dispatch:
    inputs:
      version:
        description: '选择 OpenWrt 版本'
        required: true
        type: choice
        options:
          - 23.05
          - 24.10
          - lede
        default: '24.10'
      device:
        description: '选择要编译的机型（注意：23.05 不支持 huasifei_wh3000-emmc 和部分 usboffload 机型；Lede 支持更多机型）'
        required: true
        type: choice
        options:
          # 23.05 和 24.10 通用机型
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - cmcc_rax3000m-emmc
          - cmcc_rax3000m
          - h3c_nx30pro
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
          # 24.10 独有机型
          - huasifei_wh3000-emmc
          - cmcc_rax3000m-emmc-usboffload
          - cmcc_rax3000m-usboffload
          # Lede 独有机型
          - asus_tuf-ax4200
          - asus_tuf-ax6000
          - bananapi_bpi-r3
          - bananapi_bpi-r3-mini-emmc
          - bananapi_bpi-r3-mini-nand
          - bananapi_bpi-r4
          - bananapi_bpi-r4-poe
          - cetron_ct3003-mod
          - cmcc_a10-mod
          - cmcc_rax3000m-nand
          - cmcc_xr30-nand
          - cudy_tr3000-mod
          - cudy_tr3000-v1
          - fzs_5gcpe-p3
          - glinet_gl-mt2500
          - glinet_gl-mt3000
          - glinet_gl-mt6000
          - glinet_gl-x3000
          - glinet_gl-xe3000
          - h3c_magic-nx30-pro
          - hf_m7986r1-emmc
          - hf_m7986r1-nand
          - jcg_q30-pro
          - jdcloud_re-cs-05
          - mediatek_mt7986a-rfb
          - mediatek_mt7986b-rfb
          - mediatek_mt7988a-rfb
          - netcore_n60
          - netcore_n60-pro
          - nokia_ea0326gmp
          - openembed_som7981
          - qihoo_360t7
          - ruijie_rg-x60-pro
          - tenbay_wr3000k
          - tplink_tl-xdr4288
          - tplink_tl-xdr6086
          - tplink_tl-xdr6088
          - tplink_tl-xtr8488
          - xiaomi_redmi-router-ax6000

permissions:
  contents: write

env:
  REPO_URL: ${{ github.event.inputs.version == '23.05' && 'https://github.com/padavanonly/immortalwrt-mt798x-23.05' || github.event.inputs.version == '24.10' && 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' || 'https://github.com/coolsnowwolf/lede' }}
  REPO_BRANCH: ${{ github.event.inputs.version == '23.05' && 'openwrt-23.05' || github.event.inputs.version == '24.10' && '2410' || 'master' }}
  BASE_CONFIG_FILE: ${{ github.event.inputs.version == 'lede' && 'Lede.config' || github.event.inputs.version == '23.05' && '2305.config' || 'CPE-2410.config' }}
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 检查机型支持情况并确定版本、源码和机型
      run: |
        VERSION="${{ github.event.inputs.version }}"
        DEVICE="${{ github.event.inputs.device }}"
        REPO_URL="$REPO_URL"
        REPO_BRANCH="$REPO_BRANCH"
        BASE_CONFIG_FILE="$BASE_CONFIG_FILE"

        # 定义支持机型的列表
        SUPPORTED_2305="abt_asr3000 cetron_ct3003 cmcc_a10 cmcc_rax3000m-emmc cmcc_rax3000m h3c_nx30pro imou_lc-hx3001 jcg_q30 konka_komi-a31 livinet_zr-3020 mt7981-360-t7-108M mt7981-clt-r30b1 mt7981-clt-r30b1-112M xiaomi_mi-router-ax3000t xiaomi_mi-router-ax3000t-stock xiaomi_mi-router-wr30u-112m xiaomi_mi-router-wr30u-stock"
        SUPPORTED_2410="huasifei_wh3000-emmc abt_asr3000 cetron_ct3003 cmcc_a10 cmcc_rax3000m-emmc cmcc_rax3000m cmcc_rax3000m-emmc-usboffload cmcc_rax3000m-usboffload h3c_nx30pro imou_lc-hx3001 jcg_q30 konka_komi-a31 livinet_zr-3020 mt7981-360-t7-108M mt7981-clt-r30b1 mt7981-clt-r30b1-112M xiaomi_mi-router-ax3000t xiaomi_mi-router-ax3000t-stock xiaomi_mi-router-wr30u-112m xiaomi_mi-router-wr30u-stock"
        SUPPORTED_LEDE="abt_asr3000 asus_tuf-ax4200 asus_tuf-ax6000 bananapi_bpi-r3 bananapi_bpi-r3-mini-emmc bananapi_bpi-r3-mini-nand bananapi_bpi-r4 bananapi_bpi-r4-poe cetron_ct3003 cetron_ct3003-mod cmcc_a10 cmcc_a10-mod cmcc_rax3000m-emmc cmcc_rax3000m-nand cmcc_xr30-nand cudy_tr3000-mod cudy_tr3000-v1 fzs_5gcpe-p3 glinet_gl-mt2500 glinet_gl-mt3000 glinet_gl-mt6000 glinet_gl-x3000 glinet_gl-xe3000 h3c_magic-nx30-pro huasifei_wh3000-emmc hf_m7986r1-emmc hf_m7986r1-nand imou_lc-hx3001 jcg_q30-pro jdcloud_re-cs-05 konka_komi-a31 livinet_zr-3020 mediatek_mt7986a-rfb mediatek_mt7986b-rfb mediatek_mt7988a-rfb netcore_n60 netcore_n60-pro nokia_ea0326gmp openembed_som7981 qihoo_360t7 ruijie_rg-x60-pro tenbay_wr3000k tplink_tl-xdr4288 tplink_tl-xdr6086 tplink_tl-xdr6088 tplink_tl-xtr8488 xiaomi_redmi-router-ax6000 mt7981-360-t7-108M mt7981-clt-r30b1 mt7981-clt-r30b1-112M xiaomi_mi-router-ax3000t xiaomi_mi-router-ax3000t-stock xiaomi_mi-router-wr30u-112m xiaomi_mi-router-wr30u-stock"

        # 检查所选机型是否支持所选版本
        if [ "$VERSION" == "23.05" ]; then
          if echo "$SUPPORTED_2305" | grep -qw "$DEVICE"; then
            echo "✅ 机型 $DEVICE 在 OpenWrt 23.05 中支持"
          else
            echo "❌ 错误：机型 $DEVICE 在 OpenWrt 23.05 中不支持"
            exit 1
          fi
        elif [ "$VERSION" == "24.10" ]; then
          if echo "$SUPPORTED_2410" | grep -qw "$DEVICE"; then
            echo "✅ 机型 $DEVICE 在 OpenWrt 24.10 中支持"
          else
            echo "❌ 错误：机型 $DEVICE 在 OpenWrt 24.10 中不支持"
            exit 1
          fi
        else  # lede
          if echo "$SUPPORTED_LEDE" | grep -qw "$DEVICE"; then
            echo "✅ 机型 $DEVICE 在 Lede 中支持"
          else
            echo "❌ 错误：机型 $DEVICE 在 Lede 中不支持"
            exit 1
          fi
        fi

        # 23.05 版本特定机型修正为 24.10 源码
        if [ "$VERSION" == "23.05" ]; then
          case "$DEVICE" in
            "cmcc_rax3000m-usboffload" | "cmcc_rax3000m-emmc-usboffload")
              echo "23.05 版本中 $DEVICE 自动修正为 24.10 源码"
              VERSION="24.10"
              REPO_URL="https://github.com/padavanonly/immortalwrt-mt798x-24.10"
              REPO_BRANCH="2410"
              BASE_CONFIG_FILE="CPE-2410.config"
              ;;
          esac
        fi

        # 23.05 和 24.10 版本特定机型修正为 lede 源码
        LEDE_DEVICES="asus_tuf-ax4200 asus_tuf-ax6000 bananapi_bpi-r3 bananapi_bpi-r3-mini-emmc bananapi_bpi-r3-mini-nand bananapi_bpi-r4 bananapi_bpi-r4-poe cetron_ct3003-mod cmcc_a10-mod cmcc_rax3000m-nand cmcc_xr30-nand cudy_tr3000-mod cudy_tr3000-v1 fzs_5gcpe-p3 glinet_gl-mt2500 glinet_gl-mt3000 glinet_gl-mt6000 glinet_gl-x3000 glinet_gl-xe3000 h3c_magic-nx30-pro hf_m7986r1-emmc hf_m7986r1-nand jcg_q30-pro jdcloud_re-cs-05 mediatek_mt7986a-rfb mediatek_mt7986b-rfb mediatek_mt7988a-rfb netcore_n60 netcore_n60-pro nokia_ea0326gmp openembed_som7981 qihoo_360t7 ruijie_rg-x60-pro tenbay_wr3000k tplink_tl-xdr4288 tplink_tl-xdr6086 tplink_tl-xdr6088 tplink_tl-xtr8488 xiaomi_redmi-router-ax6000"
        if [ "$VERSION" == "23.05" ] || [ "$VERSION" == "24.10" ]; then
          for lede_device in $LEDE_DEVICES; do
            if [ "$DEVICE" == "$lede_device" ]; then
              echo "$VERSION 版本中 $DEVICE 自动修正为 lede 源码"
              VERSION="lede"
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              BASE_CONFIG_FILE="Lede.config"
              break
            fi
          done
        fi

        # 24.10 版本特定机型转换
        if [ "$VERSION" == "24.10" ]; then
          case "$DEVICE" in
            "cmcc_rax3000m-nand")
              DEVICE="cmcc_rax3000m"
              echo "24.10 版本中 cmcc_rax3000m-nand 自动转换为 cmcc_rax3000m"
              ;;
            "qihoo_360t7")
              DEVICE="mt7981-360-t7-108M"
              echo "24.10 版本中 qihoo_360t7 自动转换为 mt7981-360-t7-108M"
              ;;
            "h3c_magic-nx30-pro")
              DEVICE="h3c_nx30pro"
              echo "24.10 版本中 h3c_magic-nx30-pro 自动转换为 h3c_nx30pro"
              ;;
            "jcg_q30-pro")
              DEVICE="jcg_q30"
              echo "24.10 版本中 jcg_q30-pro 自动转换为 jcg_q30"
              ;;
          esac
        fi

        # lede 版本特定机型转换
        if [ "$VERSION" == "lede" ]; then
          case "$DEVICE" in
            "cmcc_rax3000m")
              DEVICE="cmcc_rax3000m-nand"
              echo "lede 版本中 cmcc_rax3000m 自动转换为 cmcc_rax3000m-nand"
              ;;
            "mt7981-360-t7-108M")
              DEVICE="qihoo_360t7"
              echo "lede 版本中 mt7981-360-t7-108M 自动转换为 qihoo_360t7"
              ;;
            "h3c_nx30pro")
              DEVICE="h3c_magic-nx30-pro"
              echo "lede 版本中 h3c_nx30pro 自动转换为 h3c_magic-nx30-pro"
              ;;
            "jcg_q30")
              DEVICE="jcg_q30-pro"
              echo "lede 版本中 jcg_q30 自动转换为 jcg_q30-pro"
              ;;
          esac
        fi

        # 23.05 版本特定机型转换（仅对非 lede 生效）
        if [ "$VERSION" == "23.05" ]; then
          case "$DEVICE" in
            "cmcc_rax3000m-usboffload")
              DEVICE="cmcc_rax3000m"
              echo "转换机型：cmcc_rax3000m-usboffload -> cmcc_rax3000m (23.05)"
              ;;
            "cmcc_rax3000m-emmc-usboffload")
              DEVICE="cmcc_rax3000m-emmc"
              echo "转换机型：cmcc_rax3000m-emmc-usboffload -> cmcc_rax3000m-emmc (23.05)"
              ;;
            "huasifei_wh3000-emmc")
              echo "错误：huasifei_wh3000-emmc 在 23.05 中不支持"
              exit 1
              ;;
          esac
        fi

        # 24.10 版本 huasifei_wh3000-emmc 提示
        if [ "$VERSION" == "24.10" ] && [ "$DEVICE" == "huasifei_wh3000-emmc" ]; then
          echo "警告：huasifei_wh3000-emmc 是 24.10 的新宠，享受吧！"
        fi

        # 保存环境变量
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "DEVICE=$DEVICE" >> $GITHUB_ENV
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "BASE_CONFIG_FILE=$BASE_CONFIG_FILE" >> $GITHUB_ENV

    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zip
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt


    - name: 调试：检查文件是否存在
      run: |
        ls -la $GITHUB_WORKSPACE/scripts/

    - name: 加载自定义 Feeds
      run: |
        cd openwrt
        chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: 安装 Feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: 加载配置
      run: |
        cd openwrt
        [ -e $GITHUB_WORKSPACE/files ] && mv $GITHUB_WORKSPACE/files $GITHUB_WORKSPACE/openwrt/files
        [ -e $GITHUB_WORKSPACE/$BASE_CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$BASE_CONFIG_FILE .config
        if [ "${{ github.event.inputs.version }}" == "lede" ]; then
          # 替换 Lede.config 中的目标设备配置
          sed -i "/CONFIG_TARGET_mediatek_filogic_DEVICE_/d" .config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_$DEVICE=y" >> .config
          # 更新 TARGET_PROFILE
          sed -i "s/CONFIG_TARGET_PROFILE=\"DEVICE_.*\"/CONFIG_TARGET_PROFILE=\"DEVICE_$DEVICE\"/" .config
        else
          # 处理 23.05 和 24.10 的配置
          sed -i "/CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_/d" .config
          echo "CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_$DEVICE=y" >> .config
          echo "CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_$DEVICE=\"\"" >> .config
        fi
        make defconfig

    - name: 检查配置
      id: check_config
      run: |
        cd openwrt
        if [ "${{ github.event.inputs.version }}" == "lede" ]; then
          if grep -q "CONFIG_TARGET_mediatek_filogic_DEVICE_${DEVICE}=y" .config && grep -q "CONFIG_TARGET_PROFILE=\"DEVICE_${DEVICE}\"" .config; then
            echo "配置检查通过：目标设备 $DEVICE 已正确配置 (Lede)"
            echo "config_status=success" >> $GITHUB_OUTPUT
          else
            echo "错误：配置检查失败，未找到目标设备 $DEVICE 的配置或 PROFILE 未正确设置 (Lede)"
            exit 1
          fi
        else
          if grep -q "CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_${DEVICE}=y" .config; then
            echo "配置检查通过：目标设备 $DEVICE 已正确配置"
            echo "config_status=success" >> $GITHUB_OUTPUT
          else
            echo "错误：配置检查失败，未找到目标设备 $DEVICE 的配置"
            exit 1
          fi
        fi

    - name: 执行自定义脚本
      if: steps.check_config.outputs.config_status == 'success'
      run: |
        cd openwrt
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载软件包
      if: steps.check_config.outputs.config_status == 'success'
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      if: steps.check_config.outputs.config_status == 'success'
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile for $DEVICE"
        make -j$(nproc) V=s || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查磁盘空间使用情况
      if: steps.check_config.outputs.config_status == 'success' && !cancelled()
      run: df -hT

    - name: 整理文件并压缩为 ZIP
      id: organize
      if: steps.check_config.outputs.config_status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        FIRMWARE_DIR=$PWD
        echo "固件目录: $FIRMWARE_DIR"
        echo "FIRMWARE=$FIRMWARE_DIR" >> $GITHUB_ENV

        if ls $FIRMWARE_DIR/*.bin >/dev/null 2>&1; then
          for bin_file in *.bin; do
            zip_filename="${bin_file%.bin}${FILE_DATE}.zip"
            zip -r "$zip_filename" "$bin_file"
            echo "已压缩为: $zip_filename"
          done
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "错误：未找到 $DEVICE 的固件，退出"
          exit 1
        fi

    - name: 上传固件目录
      uses: actions/upload-artifact@v4
      if: steps.check_config.outputs.config_status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ github.event.inputs.version }}_${{ env.DEVICE }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布固件：砖厂大师的最新杰作
      if: steps.check_config.outputs.config_status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ github.event.inputs.version }}_${{ env.DEVICE }}_${{ env.FILE_DATE }}"
        name: "MT798X 固件 ${{ github.event.inputs.version }} - ${{ env.DEVICE }}"
        body: |
          🎉 **砖厂大师最新力作发布啦！** 🎉  
          经过无数次“烧砖”实验，这款固件终于出炉！  
          - **版本**: ${{ github.event.inputs.version }}  
          - **机型**: ${{ env.DEVICE }}  
          - **管理地址**：192.168.2.1  
          - **密码**：${{ github.event.inputs.version == 'lede' && 'password' || '空' }}  
          - **源码来源**：${{ github.event.inputs.version == 'lede' && 'https://github.com/coolsnowwolf/lede' || (github.event.inputs.version == '23.05' && 'https://github.com/padavanonly/immortalwrt-mt798x-23.05' || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10') }}  
          - **感谢**：感谢 padavanonly 和 coolsnowwolf 的开源贡献！  
          - **特别说明**: 如果你的路由器变砖了，别怪我，可能是它自己想退休了！  
          - **使用建议**: 刷之前请备份，刷之后请祈祷，刷完变砖请点个 Star安慰我！  
          快来下载体验吧，MT798X 的“魔法”在召唤你！  
        files: |
          ${{ env.FIRMWARE }}/*sysupgrade.bin
          ${{ env.FIRMWARE }}/*factory.bin
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 上传固件到私有 WebDAV
      if: steps.compile.outputs.status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        # 检查 WebDAV 配置是否完整
        if [ -z "${{ secrets.WEBDAV_URL }}" ] || [ -z "${{ secrets.WEBDAV_USER }}" ] || [ -z "${{ secrets.WEBDAV_PASSWORD }}" ]; then
          echo "⚠️ WebDAV 配置不完整（缺少 WEBDAV_URL、WEBDAV_USER 或 WEBDAV_PASSWORD），跳过上传到 WebDAV"
        else
          # 如果配置完整，则执行上传
          for file in ${{ env.FIRMWARE }}/*.zip; do
            echo "上传 $file 到 WebDAV..."
            curl -u ${{ secrets.WEBDAV_USER }}:${{ secrets.WEBDAV_PASSWORD }} \
              -T "$file" \
              "${{ secrets.WEBDAV_URL }}/${{ github.event.inputs.version }}/${{ env.DEVICE }}/$(basename $file)" || {
                echo "⚠️ 上传 $file 失败，但将继续处理其他文件"
              }
            echo "成功上传: $file"
          done
        fi
