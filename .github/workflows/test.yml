name: "MT7981固件炼丹炉：逐个编译并压缩大师"

on:
  schedule:
    - cron: "0 0 * * *"  # 每天0点运行一次
  workflow_dispatch:
    inputs:
      version:
        description: '选择 OpenWrt 版本'
        required: true
        type: choice
        options:
          - 23.05
          - 24.10
        default: '24.10'

permissions:
  contents: write

env:
  REPO_URL: ${{ github.event.inputs.version == '23.05' && 'https://github.com/padavanonly/immortalwrt-mt798x-23.05' || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.version == '23.05' && 'openwrt-23.05' || '2410' }}
  BASE_CONFIG_FILE: ${{ github.event.inputs.version == '23.05' && '2305.config' || '2410.config' }}
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  DEVICE_LIST: "abt_asr3000 cetron_ct3003 cmcc_a10 cmcc_rax3000m-emmc cmcc_rax3000m cmcc_rax3000m-emmc-usboffload cmcc_rax3000m-usboffload h3c_nx30pro huasifei_wh3000-emmc imou_lc-hx3001 jcg_q30 konka_komi-a31 livinet_zr-3020 mt7981-360-t7-108M mt7981-clt-r30b1 mt7981-clt-r30b1-112M xiaomi_mi-router-ax3000t xiaomi_mi-router-ax3000t-stock xiaomi_mi-router-wr30u-112m xiaomi_mi-router-wr30u-stock"
  VERSION: ${{ github.event.inputs.version || '24.10' }}

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用 GitHub 托管的 Ubuntu 22.04 运行器
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义 Feeds
      run: |
        cd openwrt
        chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: 安装 Feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: 逐个编译并压缩所有机型
      run: |
        echo "开始逐个编译所有机型，版本: ${{ env.VERSION }}"
        for DEVICE in ${{ env.DEVICE_LIST }}; do
          echo "开始编译机型: $DEVICE"

          # 23.05 机型转换逻辑
          if [ "${{ env.VERSION }}" == "23.05" ]; then
            case "$DEVICE" in
              "cmcc_rax3000m-usboffload")
                DEVICE="cmcc_rax3000m"
                echo "转换机型：cmcc_rax3000m-usboffload -> cmcc_rax300m (23.05)"
                ;;
              "cmcc_rax3000m-emmc-usboffload")
                DEVICE="cmcc_rax3000m-emmc"
                echo "转换机型：cmcc_rax3000m-emmc-usboffload -> cmcc_rax3000m-emmc (23.05)"
                ;;
              "huasifei_wh3000-emmc")
                echo "错误：huasifei_wh3000-emmc 在 23.05 中不支持，跳过"
                continue
                ;;
            esac
          else
            if [ "$DEVICE" == "huasifei_wh3000-emmc" ]; then
              echo "警告：huasifei_wh3000-emmc 是 24.10 的新宠，享受吧！"
            fi
          fi

          # 加载配置
          cd $GITHUB_WORKSPACE/openwrt
          [ -e $GITHUB_WORKSPACE/files ] && mv $GITHUB_WORKSPACE/files $GITHUB_WORKSPACE/openwrt/files
          [ -e $GITHUB_WORKSPACE/$BASE_CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$BASE_CONFIG_FILE $GITHUB_WORKSPACE/openwrt/.config
          sed -i "/CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_/d" .config
          echo "CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_$DEVICE=y" >> .config
          echo "CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_$DEVICE=\"\"" >> .config
          make defconfig

          # 检查配置
          if grep -q "CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_$DEVICE=y" .config; then
            echo "配置检查通过：目标设备 $DEVICE 已正确配置"
          else
            echo "错误：配置检查失败，未找到目标设备 $DEVICE 的配置，跳过"
            continue
          fi

          # 执行自定义脚本
          chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P2_SH

          # 下载软件包
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

          # 编译固件
          echo -e "$(nproc) thread compile for $DEVICE"
          make -j$(nproc) V=s || make -j1 V=s

          # 整理并压缩固件
          cd bin/targets/*/*
          rm -rf packages
          FIRMWARE_DIR=$PWD
          FILE_DATE=$(date +"%Y%m%d%H%M")
          echo "固件目录: $FIRMWARE_DIR"

          # 将所有 .bin 文件压缩为 .tar.gz
          if ls $FIRMWARE_DIR/*.bin >/dev/null 2>&1; then
            tar -czf "$DEVICE-firmware_$FILE_DATE.tar.gz" *.bin
            echo "已生成压缩文件: $DEVICE-firmware_$FILE_DATE.tar.gz"
          else
            echo "警告：$DEVICE 的固件文件未找到，跳过压缩和上传"
            cd $GITHUB_WORKSPACE/openwrt
            make clean
            continue
          fi

          # 上传到 WebDAV
          curl -v -u ${{ secrets.WEBDAV_USER }}:${{ secrets.WEBDAV_PASSWORD }} \
            -T "$DEVICE-firmware_$FILE_DATE.tar.gz" \
            "${{ secrets.WEBDAV_URL }}/${{ env.VERSION }}/$DEVICE/$DEVICE-firmware_$FILE_DATE.tar.gz" || {
              echo "上传 $DEVICE-firmware_$FILE_DATE.tar.gz 失败"
              exit 1
            }
          echo "成功上传 $DEVICE 的固件压缩文件: $DEVICE-firmware_$FILE_DATE.tar.gz"

          # 清理编译产物
          cd $GITHUB_WORKSPACE/openwrt
          make clean
          echo "完成 $DEVICE 的编译、压缩和上传，进入下一个机型..."
        done
